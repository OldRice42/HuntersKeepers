# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe HuntersImprovementsController, type: :controller do
  let(:hunter) { create(:hunter) }
  let(:improvement) { create(:improvement) }
  let(:hunters_improvement) { HuntersImprovement.create(hunter: hunter, improvement: improvement) }
  # This should return the minimal set of attributes required to create a valid
  # HuntersImprovement. As you add validations to HuntersImprovement, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      hunter_id: hunter.id,
      improvement_id: improvement.id
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HuntersImprovementsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    subject { get :index, params: { hunter_id: hunter.id }, session: valid_session }

    it 'returns a success response' do
      HuntersImprovement.create! valid_attributes
      subject
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    subject { get :show, params: { hunter_id: hunter.id, id: hunters_improvement.to_param }, session: valid_session }
    it 'returns a success response' do
      hunters_improvement = HuntersImprovement.create! valid_attributes
      subject
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    subject { get :new, params: { hunter_id: hunter.id }, session: valid_session }

    it 'returns a success response' do
      subject
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    subject { get :edit, params: { hunter_id: hunter.id, id: hunters_improvement.to_param }, session: valid_session }
    it 'returns a success response' do
      hunters_improvement = HuntersImprovement.create! valid_attributes
      subject
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    subject { post :create, params: { hunter_id: hunter.id, hunters_improvement: attributes }, session: valid_session }
    context 'with valid params' do
      let(:attributes) { valid_attributes }

      it 'creates a new HuntersImprovement' do
        expect do
          subject
        end.to change(HuntersImprovement, :count).by(1)
      end

      it 'redirects to the created hunters_improvement' do
        subject
        expect(response).to redirect_to(hunter_hunters_improvement_url(hunter_id: hunter.id, id: HuntersImprovement.last.id))
      end
    end

    context 'with invalid params' do
      let(:attributes) { invalid_attributes }

      it "returns a success response (i.e. to display the 'new' template)" do
        subject
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    subject { put :update, params: { hunter_id: hunter.id, id: hunters_improvement.id, hunters_improvement: attributes }, session: valid_session }
    let(:different_improvement) { create(:improvement) }

    context 'with valid params' do
      let(:attributes) do
        {
          id: hunters_improvement.id,
          hunter_id: hunter.id,
          improvement_id: different_improvement.id
        }
      end

      it 'updates the requested hunters_improvement' do
        hunters_improvement
        subject
        hunters_improvement.reload
        expect(hunters_improvement.improvement).to eq different_improvement
      end

      it 'redirects to the hunters_improvement' do
        hunters_improvement
        subject
        expect(response).to redirect_to(hunter_hunters_improvement_url(hunter_id: hunter.id, id: hunters_improvement.id))
      end
    end

    context 'with invalid params' do
      let(:attributes) { invalid_attributes }

      it "returns a success response (i.e. to display the 'edit' template)" do
        hunters_improvement
        put :update, params: { id: hunters_improvement.to_param, hunters_improvement: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    subject { delete :destroy, params: { hunter_id: hunter.id, id: hunters_improvement.to_param }, session: valid_session }

    it 'destroys the requested hunters_improvement' do
      hunters_improvement
      expect do
        subject
      end.to change(HuntersImprovement, :count).by(-1)
    end

    it 'redirects to the hunters_improvements list' do
      hunters_improvement = HuntersImprovement.create! valid_attributes
      subject
      expect(response).to redirect_to(hunter_hunters_improvements_url)
    end
  end
end
